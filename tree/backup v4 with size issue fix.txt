<!DOCTYPE html>

<html>

    <style>
        .node {
    cursor: pointer;
}
.node circle {
    fill: #fff;
    stroke: steelblue;
    stroke-width: 1.5px;
}
.node text {
    font: 10px sans-serif;
}
.link {
    fill: none;
    stroke: #ccc;
    stroke-width: 1.5px;
}

body {
    overflow: hidden;
}
    </style>

    <script src="https://d3js.org/d3.v3.min.js" charset="utf-8"></script>

    <body>
        <div id="body" style="padding-left:300px ; width:100%;"></div>
    </body>


    <script>

function filterTree(obj, results,search) {
   
  if (search.name===obj.name)
  {    console.log("Run now"); 
          if(obj.children==null)
            {
                obj.children=[{}];
                obj.children[0]=results;
                console.log("naya children");
                console.log(obj.children);
            }
            else
        obj.children.push(results);
        console.log("poorane children");
        console.log(obj.children);
        obj.count=obj.count+1;
  }
    //results.push(obj);;
  
  if (obj.children)
    for (let child of obj.children)
      filterTree(child, results, search) 
}

var margin = {
    top: 20,
    right: 120,
    bottom: 20,
    left: 120
},
width = 960 - margin.right - margin.left,
height = 800 - margin.top - margin.bottom;

var root = {
    "name": "parent",
    "count":0,
    "children": null
};

var i = 0,
    duration = 750,
    rectW = 212,
    rectH = 64;

var tree = d3.layout.tree().nodeSize([120, 40]);
var diagonal = d3.svg.diagonal()
    .projection(function (d) {
    return [d.x *2 + rectW / 2, d.y + rectH / 2];
});

var svg = d3.select("#body").append("svg").attr("width", 10000).attr("height", 10000)
    .append("g")
    .attr("transform", "translate(" + 350 + "," + 20 + ")");

//necessary so that zoom knows where to zoom and unzoom from
//zm.translate([350, 20]);

root.x0 = 0;
root.y0 = height / 2;

function collapse(d) {
    if (d.children) {
        d._children = d.children;
        d._children.forEach(collapse);
        d.children = null;
    }
}

//root.children.forEach(collapse);
update(root);

d3.select("#body").style("height", "100%");
d3.select("#body").style("width", "100%");

function update(source) {

    // Compute the new tree layout.
    var nodes = tree.nodes(root).reverse(),
        links = tree.links(nodes);

    // Normalize for fixed-depth.
    nodes.forEach(function (d) {
        d.y = d.depth * 180;
    });

    // Update the nodes…
    var node = svg.selectAll("g.node")
        .data(nodes, function (d) {
        return d.id || (d.id = ++i);
    });

    // Enter any new nodes at the parent's previous position.
    var nodeEnter = node.enter().append("g")
        .attr("class", "node")
        .attr("transform", function (d) {
        return "translate(" + source.x0 + "," + source.y0 + ")";
    })
        .on("click", click);

    nodeEnter.append("rect")
        .attr("width", 412)
        .attr("height", 165)
        .attr("stroke", "black")
        .attr("stroke-width", 1)
        .style("fill", function (d) {
        return d._children ? "lightsteelblue" : "#fff";
    });

    nodeEnter.append("text")
        .attr("x", rectW / 2)
        .attr("y", rectH / 2)
        .attr("dy", ".35em")
        .attr("text-anchor", "middle")
        .text(function (d) {
        return d.name;
    });





    nodeEnter.append('svg:image')
            .attr('x', 203)
            .attr('y', -7)
            .attr('width', 24)
            .attr('height', 24)
            .attr('xlink:href', './img/system-icon-filled-icons-alert-icon-positive.svg')   
        nodeEnter.append('svg:image')
            .attr('x', 180)
            .attr('y', 10)
            .attr('width', 24)
            .attr('height', 24)
            .attr('xlink:href', './img/edit-24-px.svg')  
    // Transition nodes to their new position.
    var nodeUpdate = node.transition()
        .duration(duration)
        .attr("transform", function (d) {
        return "translate(" + d.x*2 + "," + d.y + ")";
    });








    nodeUpdate.select("rect")
        .attr("width", rectW)
        .attr("height", rectH)
        .attr("stroke", "black")
        .attr("stroke-width", 1)
        .style("fill", function (d) {
        return d._children ? "lightsteelblue" : "#fff";
    });

    nodeUpdate.select("text")
        .style("fill-opacity", 1);

    // Transition exiting nodes to the parent's new position.
    var nodeExit = node.exit().transition()
        .duration(duration)
        .attr("transform", function (d) {
        return "translate(" + source.x + "," + source.y + ")";
    })
        .remove();

    nodeExit.select("rect")
        .attr("width", rectW)
        .attr("height", rectH)
    //.attr("width", bbox.getBBox().width)""
    //.attr("height", bbox.getBBox().height)
    .attr("stroke", "black")
        .attr("stroke-width", 1);

    nodeExit.select("text");

    // Update the links…
    var link = svg.selectAll("path.link")
        .data(links, function (d) {
        return d.target.id;
    });

    // Enter any new links at the parent's previous position.
    link.enter().insert("path", "g")
        .attr("class", "link")
        .attr("x", rectW / 2)
        .attr("y", rectH / 2)
        .attr("d", function (d) {
        var o = {
            x: source.x0,
            y: source.y0
        };
        return diagonal({
            source: o,
            target: o
        });
    });

    // Transition links to their new position.
    link.transition()
        .duration(duration)
        .attr("d", diagonal);

    // Transition exiting nodes to the parent's new position.
    link.exit().transition()
        .duration(duration)
        .attr("d", function (d) {
        var o = {
            x: source.x,
            y: source.y
        };
        return diagonal({
            source: o,
            target: o
        });
    })
        .remove();

    // Stash the old positions for transition.
    nodes.forEach(function (d) {
        d.x0 = d.x;
        d.y0 = d.y;
    });
}

name = 1;
// Toggle children on click.
function click(d) {
  console.log("d:"+d.children);
  var d1 = {
      "name":name.toString(),
      "count":0,
      "children":null
  };
  //Object.assign(d,d1);
  console.log("name :" + d.name);
  console.log("count :"+ d.count);
  console.log("children:" + d.children);
  name++;
  if(d.count<15)
  {
  filterTree(root, d1,d);
  }
        update(d);
}

//Redraw for zoom
function redraw() {
  //console.log("here", d3.event.translate, d3.event.scale);
  svg.attr("transform",
      "translate(" + d3.event.translate + ")"
      + " scale(" + d3.event.scale + ")");
}

 
    </script>

</html>